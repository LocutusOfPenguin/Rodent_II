// Piece/square tables are taken from Toga Log User Manual 
// (http://members.aon.at/josefd/Toga%20LOG.html)
// and modified slightly.

static const int pstPawnMg[64] = {
//A1                                H1
  0,   0,   0,   0,   0,   0,   0,   0,
-15,  -5,   0,   5,   5,   0,  -5, -15,
-15,  -5,   5,  15,  15,   5,  -5, -15,
-15,  -5,  10,  25,  25,  10,  -5, -15,
-15,  -5,   5,  15,  15,   5,  -5, -15,
-15,  -5,   5,  15,  15,   5,  -5, -15,
-15,  -5,   5,  15,  15,   5,  -5, -15,
  0,   0,   0,   0,   0,   0,   0,   0
//A8                                H8
 };

static const int pstPawnEg[64] = {
//A1                                H1
  0,   0,   0,   0,   0,   0,   0,   0,
  3,   1,  -1,  -3,  -3,  -1,   1,   3,
  3,   1,  -1,  -3,  -3,  -1,   1,   3,
  3,   1,  -1,  -3,  -3,  -1,   1,   3,
  3,   1,  -1,  -3,  -3,  -1,   1,   3,
  3,   1,  -1,  -3,  -3,  -1,   1,   3,
  3,   1,  -1,  -3,  -3,  -1,   1,   3,
  0,   0,   0,   0,   0,   0,   0,   0
//A8                                H8
 };

static const int pstKnightMg[64] = {
//A1                                H1
-50, -40, -30, -25, -25, -30, -40, -50,
-35, -25, -15,  -5,  -5, -15, -25, -35,
-20, -10,   0,   5,   5,   0, -10, -20,
-10,   0,  10,  15,  15,  10,   0, -10,
-5,    5,  15,  20,  20,  15,   5,  -5,
-5,    5,  15,  20,  20,  15,   5,  -5,
-20, -10,   0,   5,   5,   0, -10, -20,
-135,-25, -15, -10, -10, -15, -25, -135
//A8                                H8
};

static const int pstKnightEg[64] = {
//A1                                H1
-40, -30, -20, -15, -15, -20, -30, -40,
-30, -20, -10,  -5,  -5, -10, -20, -30,
-20, -10,   0,   5,   5,   0, -10, -20,
-15,  -5,   5,  10,  10,   5,  -5, -15,
-15,  -5,   5,  10,  10,   5,  -5, -15,
-20, -10,   0,   5,   5,   0, -10, -20,
-30, -20, -10,  -5,  -5, -10, -20, -30,
-40, -30, -20, -15, -15, -20, -30, -40
//A8                                H8
};

static const int pstBishopMg[64] = {
//A1                                H1
 -2,  -5, -16,  -5,  -5, -16,  -5,  -2,
 -5,   6,   3,   6,   6,   3,   6,  -5,
 -5,   5,   8,  10,  10,   8,   5,  -5,
 -5,   0,  10,  13,  13,  10,   0,  -5,
 -5,   0,   5,  13,  13,   5,   0,  -5,
 -5,   0,   5,   5,   5,   5,   0,  -5,
 -5,   0,   0,   0,   0,   0,   0,  -5,
 -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5
//A8                                H8
};

static const int pstBishopEg[64] = {
//A1                                H1
-15, -10,  -8,  -5,  -5,  -8, -10, -15,
-10,  -8,   0,   5,   5,   0,  -8, -10,
 -5,   0,   5,  10,  10,   5,   0,  -8,
 -5,   5,  10,  15,  15,  10,   5,  -5,
 -5,   5,  10,  15,  15,  10,   5,  -5,
 -8,   0,   5,  10,  10,   5,   0,  -8,
 10,  -8,   0,   5,   5,   0,  -8, -10,
-15, -10,  -8,  -5,  -5,  -8, -10, -15
//A8                                H8
};

static const int pstRookMg[64] = {
//A1                                H1
  0,   1,   2,   4,   4,   2,   1,   0,
 -3,  -1,   1,   3,   3,   1,  -1,  -3,
 -3,  -1,   1,   3,   3,   1,  -1,  -3,
 -3,  -1,   1,   3,   3,   1,  -1,  -3,
 -3,  -1,   1,   3,   3,   1,  -1,  -3,
 -3,  -1,   1,   3,   3,   1,  -1,  -3,
 -3,  -1,   1,   3,   3,   1,  -1,  -3,
 -3,  -1,   1,   3,   3,   1,  -1,  -3
//A8                                H8
};

// rook endgame table is filled with zeroes in InitEval()

// queen midgame table is initialized in InitEval:
// -5 for the first rank, otherwise 0

static const int pstQueenEg[64] = {
//A1                                H1
-24, -16, -12,  -8,  -8, -12, -16, -24,
-16, -12,  -4,   0,   0,  -4, -12, -16,
-12,  -4,   0,   4,   4,   0,  -4, -12,
 -8,   0,   4,   8,   8,   4,   0,  -8,
 -8,   0,   4,   8,   8,   4,   0,  -8,
-12,  -4,   0,   4,   4,   0,  -4, -12,
-16, -12,  -4,   0,   0,  -4, -12, -16,
-24, -16, -12,  -8,  -8, -12, -16, -24
//A8                                H8
};

static const int pstKingMg[64] = {
//A1                                H1
 40,  50,  30,  10,  10,  30,  50,  40,
 30,  40,  20,   0,   0,  20,  40,  30,
 10,  20,   0, -20, -20,   0,  20,  10,
  0,  10, -10, -30, -30, -10,  10,   0,
-10,   0, -20, -40, -40, -20,   0, -10,
-20, -10, -30, -50, -50, -30, -10, -20,
-30, -20, -40, -60, -60, -40, -20, -30,
-40, -30, -50, -70, -70, -50, -30, -40
//A8                                H8
};

static const int pstKingEg[64] = {
//A1                                H1
-72, -48, -36, -24, -24, -36, -48, -72,
-48, -24, -12,   0,   0, -12, -24, -48,
-36, -12,   0,  12,  12,   0, -12, -36,
-24,   0,  12,  24,  24,  12,   0, -24,
-24,   0,  12,  24,  24,  12,   0, -24,
-36, -12,   0,  12,  12,   0, -12, -36,
-48, -24, -12,   0,   0, -12, -24, -48,
-72, -48, -36, -24, -24, -36, -48, -72
//A8                                H8
};

static const int pstKnightOutpost[64] =
{
  0,   0,   0,   0,   0,   0,   0,   0,
  0,   0,   0,   0,   0,   0,   0,   0,
  0,   0,   0,   0,   0,   0,   0,   0,
  0,   2,   3,   6,   6,   3,   2,   0,
  0,   2,   6,   9,   9,   6,   2,   0,
  0,   3,   9,  12,  12,   9,   3,   0,
  0,   0,   0,   0,   0,   0,   0,   0,
  0,   0,   0,   0,   0,   0,   0,   0
};

static const int pstBishopOutpost[64] =
{
  0,   0,   0,   0,   0,   0,   0,   0,
  0,   0,   0,   0,   0,   0,   0,   0,
  0,   0,   0,   0,   0,   0,   0,   0,
  0,   1,   2,   4,   4,   2,   1,   0,
  0,   1,   4,   6,   6,   4,   1,   0,
  0,   2,   6,   8,   8,   6,   2,   0,
  0,   0,   0,   0,   0,   0,   0,   0,
  0,   0,   0,   0,   0,   0,   0,   0
};

static const int passed_bonus_mg[2][8] = {
  { 0, 12, 12, 30, 50, 80, 130, 0 },
  { 0, 120, 80, 50, 30, 12, 12, 0 }
};

const int passed_bonus_eg[2][8] = {
  { 0, 16, 16, 39, 65, 104, 156, 0 },
  { 0, 156, 104, 65, 39, 16, 16, 0 }
};

struct sEvalHashEntry {
  U64 key;
  int score;
};

#define EVAL_HASH_SIZE 512*512
extern sEvalHashEntry EvalTT[EVAL_HASH_SIZE];